#!/usr/local/bin/perl -w

use strict;

###################################################
##  TEXT SEGMENT CLASSIFIER
##
##      hw1b.prl < segment.data.train
##
##  Joseph Paek jpaek1@jhu.edu
###################################################

my @right;
my @wrong;
my $numrules = 10; #UPDATE ME

my @testlines = ( );
my @reallines = ( );
my $numlines = 0;

my $correct = 0; # num of correct classifications
my $incorrect = 0; # num of incorrect classifications
my $line = undef;

my %output;

while (defined ($line = <>)) {
    chomp $line;

    if ($line =~ /^#BLANK#/) {
        &process_segment if $numlines;

        print $line, "\n";

        @testlines = ( );
        @reallines = ( );
        $numlines = 0;
    }
    else {
        ($testlines[$numlines]) = ($line =~ m/^[^\t]+\t(.*)/);
        ($reallines[$numlines]) = ($line =~ m/^([^\t]+)\t/);
        $numlines += 1;
    }
}

#print rule usage statistics in a loop
print "=======================================================\n";
print "| Rule Usage Statistics\n";
for (my $i = 0; $i < $numrules; $i++) {
    if (!defined ($right[$i])) {
        $right[$i] = 0;
    }
    if (!defined ($wrong[$i])) {
        $wrong[$i] = 0;
    }
    print "-------------------------------------------------------\n";
    print "| Rule ", $i, " Usage Summary\n";
    print "|    Times Used: ", $right[$i]+$wrong[$i], "\n";
    printf "|    Percentage: %.1f", ($right[$i]+$wrong[$i])/($correct+$incorrect)*100; print "\n";
    print "|    Correct Uses: ", $right[$i], "\n";
    printf "|    Correct Percentage: %.1f", $right[$i]/($right[$i]+$wrong[$i])*100; print "\n";
    print "|    Incorrect Uses: ", $wrong[$i], "\n";
    printf "|    Incorrect Percentage: %.1f", $wrong[$i]/($right[$i]+$wrong[$i])*100; print "\n";
}
print "-------------------------------------------------------\n";

#print overall statistics
print "\n### HW1A jpaek1 - OVERALL CORRECT: ", $correct;
printf " = %.1f", $correct/($correct+$incorrect)*100;
print "%    INCORRECT: ", $incorrect;
printf " = %.1f", $incorrect/($incorrect+$correct)*100;
print "%\n";

############################################################
## Process segments by applying specialized detectors/
## classifiers to the array of the text lines in the segment 
############################################################


sub process_segment {
    my $i;

    if ($testlines[0] =~ /^\s*From/) { # first line begins with From RULE 1
        for ($i=0; $i<scalar @testlines; $i++) {
            &ret(1,$reallines[$i],"NNHEAD",$testlines[$i]);
        }
    }
    elsif (&quoted_detector) { # finds quotes RULE 2
        for ($i=0; $i<scalar @testlines; $i++) {
            &ret(2,$reallines[$i],"QUOTED",$testlines[$i]); 
        }
    }
    elsif (&table_detector1) { # finds table type 1 RULE 3
        for ($i=0; $i<scalar @testlines; $i++) {
            &ret(3,$reallines[$i],"TABLE",$testlines[$i]); 
        }   
    }
    elsif (&head_detector) { # finds headlines RULE 9
        for ($i = 0; $i < scalar @testlines; $i++) {
            &ret(9,$reallines[$i],"HEADL",$testlines[$i]);
        }
    }
    elsif ($testlines[0] =~ /^\s*--/ || $testlines[0] =~ /^\s*[A-Z]{3}$/) { # finds signatures RULE 6
        for ($i = 0; $i < scalar @testlines; $i++) {
            &ret(6,$reallines[$i],"SIG",$testlines[$i]);
        } 
    }
    elsif (&item_detector) { # finds item block RULE 8
        for ($i = 0; $i < scalar @testlines; $i++) {
            &ret(8,$reallines[$i],"ITEM",$testlines[$i]);
        }
    }
    elsif (&address_detector) { # finds address block RULE 7
        for ($i = 0; $i < scalar @testlines; $i++) {
            &ret(7,$reallines[$i],"ADDRESS",$testlines[$i]);
        }
    }
    elsif (&table_detector2) { # finds table type 2 RULE 4
        for ($i=0; $i<scalar @testlines; $i++) { 
            &ret(4,$reallines[$i],"TABLE",$testlines[$i]);
        }
    }
    elsif (&table_detector3) { # finds table type 3 RULE 5
        for ($i=0; $i<scalar @testlines; $i++) { 
            &ret(5,$reallines[$i],"TABLE",$testlines[$i]);
        }
    }
    # elsif (&graphic_detector) { # finds graphic RULE 10
    #     for ($i=0; $i<scalar @testlines; $i++) { 
    #         &ret(5,$reallines[$i],"GRAPHIC",$testlines[$i]);
    #     }
    # }
    else {
        for($i=0; $i<scalar @testlines; $i++) { # ptext default RULE 0
            &ret(0,$reallines[$i],"PTEXT", $testlines[$i]);
        }
    }

}

############################################################
## QUOTED_DETECTOR
############################################################
    
sub quoted_detector 
{
    my $score  = 0;
    my $weight = 0.75;
    my $i;

    my $quote0 = "@";
    my $quote1 = ">";
    my $quote2 = ":";
    my $quote3 = "\\|>";

    my $block_quote = "$quote0|$quote1|$quote2|$quote3";

    my $test_quote0 = "($block_quote)($block_quote)*";
    my $test_quote1 = ".+wrote|writes:";
    
    for ($i=0; $i<scalar @testlines; $i++) {
        if ($testlines[$i] =~ /^\s*[A-Z]{2,3}\s*$test_quote0/ ) {
            $score += 1;
        }
        elsif ($testlines[$i] =~ /^\s*$test_quote0/ || $testlines[$i] =~ /^\s*$test_quote1/) {
            $score += 1;
        }
    }

    return (($score / (scalar @testlines)) > $weight);
}

############################################################
##  TABLE_DETECTOR1
##      If numeric characters are greater than preset percentage of
##      all characters then this chunk is a table.
############################################################

sub table_detector1 {
    my $weight = 0.25;
    my $count = 0;
    my $total = 0;
    
    for (my $i=0; $i<scalar @testlines; $i++) {
        my @chars = split(//, $testlines[$i]);
        foreach my $c (@chars) {
            if ($c =~ /[0-9]/) {
                $count += 1;
            }
            $total += 1;
        }
    }
    return (($count / ($total)) > $weight);
}

###########################################################
##  TABLE_DETECTOR2
##      Stores positions where a non-space character is followed 
##      by two or more spaces.
############################################################

sub table_detector2 {
    my %positions;
    my $weight = 0.75;
    my $table = 0;

    for (my $i = 0; $i < scalar @testlines; $i++) {
        my @chars = split(//, $testlines[$i]);
        for (my $j=2; $j<scalar @chars; $j++) {
            if ($chars[$j-2] =~ /[^\s]/ && $chars[$j-1] =~ /\s/ && $chars[$j] =~ /\s/) {
                $positions{$j + 1} += 1;
            }
        }
    }

    while ((my $key, my $val) = each %positions) {
        if (($val / scalar @testlines) > $weight) {
            $table = 1;
        }
    }

    return ($table);
}

############################################################
## Table_detector3
##
## Looks for a pattern of characters, tab, followed by more
## characters
############################################################

sub table_detector3 {
    my $weight = 0.75;
    my $tabs = 0;
    
    for (my $i=0; $i<scalar @testlines; $i++) {
        if ($testlines[$i] =~ /.+\t.+/) {
            $tabs += 1;
        }
    }
    return (($tabs / scalar @testlines) > $weight);
}

############################################################
##  SIG_DETECTOR
##      Looks for email
############################################################

sub sig_detector {
    my $sig = 0;
    
    for (my $i = 0; $i < scalar @testlines; $i++) 
    {
        if ($testlines[$i] =~ /^.+@.+\..+$/) {
            $sig = 1;
        }
    }
    return ($sig);
}

############################################################
##  ADDRESS_DETECTOR
##      Looks for classically formatted addresses
############################################################

sub address_detector {
    my $city = "[A-Z]+[a-z]*";
    my $state = "[A-Z]{2}";
    my $zip1 = "[0-9]{5}";
    my $zip2 = "[0-9]{5}-[0-9]{4}";
    my $address = 0;

    for (my $i=0; $i<scalar @testlines; $i++) 
    {
        if ($testlines[$i] =~ /$city, $state $zip1|$zip2/) {
            $address = 1;
        }
    }
    return ($address);
}

############################################################
##  ITEM_DETECTOR
##      Looks to see if the first line begins with -, #), #., or (#)
############################################################

sub item_detector
{
    my $item = 0;
    my $weight = 0.5;
    my $count = 0;

    my $num1 = "^[0-9]\\)";
    my $num2 = "^[0-9]\\.";
    my $num3 = "\\([0-9]\\)";

    if ($testlines[0] =~ /^\s*-/ || $testlines[0] =~ /$num1|$num2|$num3/) {
        $item = 1;
    }
    
    for (my $i = 0; $i < scalar @testlines; $i++) {
        if ($testlines[$i] =~ /^\s+/) {
            $count += 1;
        }
    }

    return (($item) && (($count/scalar @testlines) > $weight));
}

############################################################
##  HEAD_DETECTOR
##      Looks for percentage of lines having 3 or more spaces
##      or tabs
############################################################

sub head_detector {
    my $weight = .5;
    my $count = 0;
    my $head = 0;

    if ((scalar @testlines) <= 3) {
        $head = 1;
    }
    
    for (my $i = 0; $i < scalar @testlines; $i++) {
        if ($testlines[$i] =~ /^\s{3,}/) {
            $count += 1;
        }
    }

    return ($head && ($count/scalar @testlines > $weight));
}

# sub graphic_detector {

# }

############################################################
## RET - prints full line for errors and keeps score $rule
##     - indicates the rule number responsible for the 
##     - classification
##
##  This is a useful debugging tool, as after each change in
##  the program one can identify the remaining misclassified
##  training examples and the patterns responsible for them. 
############################################################
 
sub ret 
{
    my $rule       = shift;   # which rule did I use here
    my $trueclass  = shift;   # what is the true sentence class ('NEOS','EOS')
    my $givenclass = shift;   # what is the sentence class my rule gives
    my $line       = shift;   # the actual line tested

    if ($trueclass eq $givenclass) 
    {
       printf(".. (%2d) %s\t%s\t%s\n",$rule,$givenclass,$trueclass,$line);
        $correct += 1;
        $right[$rule] += 1;
    }
    else 
    {
       printf("XX (%2d) %s\t%s\t%s\n",$rule,$givenclass,$trueclass,$line);
        $incorrect += 1;
        $wrong[$rule] += 1;
        $output{$trueclass} += 1;
    }
}








