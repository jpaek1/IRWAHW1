#!/usr/local/bin/perl

#################################################
##  END-OF-SENTENCE CLASSIFIER
##
##    hw1a.prl < sent.data.train | more
##
##  Suggestion: run in a wide window
#################################################

$L="classes";

&initialize_set(*abbrevs, "$L/abbrevs");
&initialize_set(*titles, "$L/titles");
&initialize_set(*sentence_internal, "$L/sentence_internal");
&initialize_set(*unlikely_proper_nouns, "$L/unlikely_proper_nouns");
$count1=0; $count2=0; $count3=0; $count4=0; $count5=0; $count6=0;
$count7=0; $count0=0; $count8=0; $count9=0;
$correct1=0; $correct2=0; $correct3=0; $correct4=0; $correct5=0; $correct6=0;
$correct7=0; $correct0=0; $correct8=0; $correct9=0;
$incorrect=0; $incorrect2=0; $incorrect3=0; $incorrect4=0; $incorrect5=0; 
$incorrect6=0; $incorrect7=0; $incorrect0=0; $incorrect8=0; $incorrect10=0;
$overallcorrect=0; $overallincorrect=0; $counter=0;

while (<>) {
    @words = split(' ', $_);
    ($class,$id,$L3,$L2,$L1,$C,$R1,$R2,$R3,$Llen,$Rlen,$Numspaces) = @words;

    if ($R1 =~ /^[a-z]/) { #word to right is lower case (RULE 1)
        $count1 += 1;
        &ret(1,$class,$id,'NEOS');
    }
    
    elsif ($R1 eq "<P>") { #word to right is new paragraph (RULE 2)
        if ($R2 eq ".") { #word 2 to right is period (RULE 3)
            $count3 += 1;
            &ret(3,$class,$id,"NEOS");
        }
        else {
            $count2 += 1;
            &ret(2,$class,$id,'EOS');
        }
    }
    
    elsif ($R1 =~ /^[,.]/) { #word to right is comma or period (RULE 4)
        $count4 += 1;
        &ret(4,$class,$id,'NEOS');
    }

    elsif ($R1 =~ /^[A-Z]/) { #word to right is capitalized (RULE 5)
        if (&member($L1,titles)) { #Mr. Mrs. (RULE 9)
            #title before proper noun or initial (RULE 6)
            if (!(&member($R1,unlikely_proper_nouns)) || ($R2 eq ".")) {
                $count6 += 1;
                &ret(6,$class,$id,'NEOS');
            }
            else { #default
                $count9 += 1;
                &ret(9,$class,$id,'EOS');
            }
        }
        elsif ($L1 =~ /^[A-Z,a-z]$/) { #word to left is single letter (RULE 7)
            $count7 += 1;
            &ret(7,$class,$id,'NEOS');
        }
        else { #default
            $count5 += 1;
            &ret(5,$class,$id,'EOS');
        }
    }

    elsif (&member($L1,abbrevs)) { #word to left is abbreviation (RULE 8)
        $count8 += 1;
        &ret(8,$class,$id,'NEOS');
    }

    else { #word to right is number, etc (RULE 0)
        $count0 += 1;
        &ret(0,$class,$id,'EOS');
    }

    $counter += 1;
}

#print statistics
print "=======================================================\n";
print "| Rule Usage Statistics\n";
#print "|    Total Lines: ", $counter, "\n";
#print "|    Total Rules: ", $rulescounted, "\n";
print "-------------------------------------------------------\n";
print "| Rule 0 Usage Summary\n";
print "|    Times Used: ", $count0, "\n";
printf "|    Percentage: %1f", $count0/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct0, "\n";
printf "|    Correct Percentage: %1f", $correct0/$count0; print "\n";
print "|    Incorrect Uses: ", $incorrect0, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect0/$count0; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 1 Usage Summary\n";
print "|    Times Used: ", $count1, "\n";
printf "|    Percentage: %1f", $count1/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct1, "\n";
printf "|    Correct Percentage: %1f", $correct1/$count1; print "\n";
print "|    Incorrect Uses: ", $incorrect1, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect1/$count1; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 2 Usage Summary\n";
print "|    Times Used: ", $count2, "\n";
printf "|    Percentage: ", $count2/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct2, "\n";
printf "|    Correct Percentage: %1f", $correct2/$count2; print "\n";
print "|    Incorrect Uses: ", $incorrect2, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect2/$count2; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 3 Usage Summary\n";
print "|    Times Used: ", $count3, "\n";
printf "|    Percentage: %f", $count3/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct3, "\n";
printf "|    Correct Percentage: %1f", $correct3/$count3; print "\n";
print "|    Incorrect Uses: ", $incorrect3, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect3/$count3; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 4 Usage Summary\n";
print "|    Times Used: ", $count4, "\n";
printf "|    Percentage: %f", $count4/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct4, "\n";
printf "|    Correct Percentage: %1f", $correct4/$count4; print "\n";
print "|    Incorrect Uses: ", $incorrect4, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect4/$count4; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 5 Usage Summary\n";
print "|    Times Used: ", $count5, "\n";
printf "|    Percentage: %f", $count5/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct5, "\n";
printf "|    Correct Percentage: %1f", $correct5/$count5; print "\n";
print "|    Incorrect Uses: ", $incorrect5, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect5/$count5; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 6 Usage Summary\n";
print "|    Times Used: ", $count6, "\n";
printf "|    Percentage: %f", $count6/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct6, "\n";
printf "|    Correct Percentage: %1f", $correct6/$count6; print "\n";
print "|    Incorrect Uses: ", $incorrect6, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect6/$count6; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 7 Usage Summary\n";
print "|    Times Used: ", $count7, "\n";
printf "|    Percentage: %f", $count7/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct7, "\n";
printf "|    Correct Percentage: %1f", $correct7/$count7; print "\n";
print "|    Incorrect Uses: ", $incorrect7, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect7/$count7; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 8 Usage Summary\n";
print "|    Times Used: ", $count8, "\n";
printf "|    Percentage: %f", $count8/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct8, "\n";
printf "|    Correct Percentage: %1f", $correct8/$count8; print "\n";
print "|    Incorrect Uses: ", $incorrect8, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect8/$count8; print "\n";
print "-------------------------------------------------------\n";
print "| Rule 9 Usage Summary\n";
print "|    Times Used: ", $count9, "\n";
printf "|    Percentage: %f", $count9/$rulescounted; print "\n";
print "|    Correct Uses: ", $correct9, "\n";
printf "|    Correct Percentage: %1f", $correct9/$count9; print "\n";
print "|    Incorrect Uses: ", $incorrect9, "\n";
printf "|    Incorrect Percentage: %1f", $incorrect9/$count9; print "\n";
print "-------------------------------------------------------\n";

#print overall statistics
print "\n### HW1A jpaek1 - OVERALL CORRECT: ", $overallcorrect;
printf " = %.1f", $overallcorrect/$rulescounted*100;
print "%    INCORRECT: ", $overallincorrect;
printf " = %.1f", $overallincorrect/$rulescounted*100;
print "%\n";

#################################################
##  RET - prints full line for errors
##      - keeps count
#################################################

sub ret {
    local($where,$trueclass,$id,$givenclass) = @_;

    if ($trueclass eq $givenclass) {
        print ".. (at ",$where,") - ", $_;
        if ($where == 1) { 
            $correct1 += 1;
        }
        elsif($where == 2) {
            $correct2 += 1;
        }
        elsif($where == 3) {
            $correct3 += 1;
        }
        elsif($where == 4) {
            $correct4 += 1;
        }
        elsif($where == 5) {
            $correct5 += 1;
        }
        elsif($where == 6) {
            $correct6 += 1;
        }
        elsif($where == 7) {
            $correct7 += 1;
        }
        elsif($where == 0) {
            $correct0 += 1;
        }
        elsif($where == 8) {
            $correct8 += 1;
        }
        elsif($where == 9) {
            $correct9 += 1;
        }

        $overallcorrect += 1;
    }

    else {
        print "XX (at ",$where,") - ", $_;
        if ($where == 1) {
            $incorrect1 += 1;
        }
        elsif($where == 2) {
            $incorrect2 += 1;
        }
        elsif($where == 3) {
            $incorrect3 += 1;
        }
        elsif($where == 4) {
            $incorrect4 += 1;
        }
        elsif($where == 5) {
            $incorrect5 += 1;
        }
        elsif($where == 6) {
            $incorrect6 += 1;
        }
        elsif($where == 7) {
            $incorrect7 += 1;
        }
        elsif($where == 0) {
            $incorrect0 += 1;
        }
        elsif($where == 8) {
            $incorrect8 += 1;
        }
        elsif($where == 9) {
            $incorrect9 += 1;
        }

        $overallincorrect += 1;
    }
    $rulescounted += 1;
}

#################################################
##  MEMBER - tests key for membership in a given set
#################################################

sub member {
    local($key,*set) = @_;

    return $set{"\L$key"}
}

#################################################
##  INITIALIZE_SET - loads associative array with set members
#################################################

sub initialize_set {
    local(*set, $where) = @_;

    open (FILE,$where) || die "Can't open file $where: $!\n";

    while (<FILE>) {
        chop;
        $set{$_} = 1;
    }
    close (FILE);
}